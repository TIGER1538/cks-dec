/* automatically generated by rust-bindgen 0.60.1 */

pub type uint = ::std::os::raw::c_uint;
pub type soundtouch_SAMPLETYPE = f32;
#[repr(C)]
pub struct soundtouch_FIFOSamplePipe__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct soundtouch_FIFOSamplePipe {
    pub vtable_: *const soundtouch_FIFOSamplePipe__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_soundtouch_FIFOSamplePipe() {
    assert_eq!(
        ::std::mem::size_of::<soundtouch_FIFOSamplePipe>(),
        8usize,
        concat!("Size of: ", stringify!(soundtouch_FIFOSamplePipe))
    );
    assert_eq!(
        ::std::mem::align_of::<soundtouch_FIFOSamplePipe>(),
        8usize,
        concat!("Alignment of ", stringify!(soundtouch_FIFOSamplePipe))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct soundtouch_FIFOProcessor {
    pub _base: soundtouch_FIFOSamplePipe,
    pub output: *mut soundtouch_FIFOSamplePipe,
}
#[test]
fn bindgen_test_layout_soundtouch_FIFOProcessor() {
    assert_eq!(
        ::std::mem::size_of::<soundtouch_FIFOProcessor>(),
        16usize,
        concat!("Size of: ", stringify!(soundtouch_FIFOProcessor))
    );
    assert_eq!(
        ::std::mem::align_of::<soundtouch_FIFOProcessor>(),
        8usize,
        concat!("Alignment of ", stringify!(soundtouch_FIFOProcessor))
    );
    fn test_field_output() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_FIFOProcessor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_FIFOProcessor),
                "::",
                stringify!(output)
            )
        );
    }
    test_field_output();
}
#[repr(C)]
#[derive(Debug)]
pub struct soundtouch_SoundTouch {
    pub _base: soundtouch_FIFOProcessor,
    pub pRateTransposer: *mut RateTransposer,
    pub pTDStretch: *mut TDStretch,
    pub virtualRate: f64,
    pub virtualTempo: f64,
    pub virtualPitch: f64,
    pub bSrateSet: bool,
    pub samplesExpectedOut: f64,
    pub samplesOutput: ::std::os::raw::c_long,
    pub channels: uint,
    pub rate: f64,
    pub tempo: f64,
}
#[test]
fn bindgen_test_layout_soundtouch_SoundTouch() {
    assert_eq!(
        ::std::mem::size_of::<soundtouch_SoundTouch>(),
        104usize,
        concat!("Size of: ", stringify!(soundtouch_SoundTouch))
    );
    assert_eq!(
        ::std::mem::align_of::<soundtouch_SoundTouch>(),
        8usize,
        concat!("Alignment of ", stringify!(soundtouch_SoundTouch))
    );
    fn test_field_pRateTransposer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pRateTransposer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(pRateTransposer)
            )
        );
    }
    test_field_pRateTransposer();
    fn test_field_pTDStretch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pTDStretch) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(pTDStretch)
            )
        );
    }
    test_field_pTDStretch();
    fn test_field_virtualRate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virtualRate) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(virtualRate)
            )
        );
    }
    test_field_virtualRate();
    fn test_field_virtualTempo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virtualTempo) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(virtualTempo)
            )
        );
    }
    test_field_virtualTempo();
    fn test_field_virtualPitch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).virtualPitch) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(virtualPitch)
            )
        );
    }
    test_field_virtualPitch();
    fn test_field_bSrateSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bSrateSet) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(bSrateSet)
            )
        );
    }
    test_field_bSrateSet();
    fn test_field_samplesExpectedOut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).samplesExpectedOut) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(samplesExpectedOut)
            )
        );
    }
    test_field_samplesExpectedOut();
    fn test_field_samplesOutput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).samplesOutput) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(samplesOutput)
            )
        );
    }
    test_field_samplesOutput();
    fn test_field_channels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(channels)
            )
        );
    }
    test_field_channels();
    fn test_field_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(rate)
            )
        );
    }
    test_field_rate();
    fn test_field_tempo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<soundtouch_SoundTouch>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tempo) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(soundtouch_SoundTouch),
                "::",
                stringify!(tempo)
            )
        );
    }
    test_field_tempo();
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch16getVersionStringEv"]
    pub fn soundtouch_SoundTouch_getVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch12getVersionIdEv"]
    pub fn soundtouch_SoundTouch_getVersionId() -> uint;
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch7setRateEd"]
    pub fn soundtouch_SoundTouch_setRate(this: *mut soundtouch_SoundTouch, newRate: f64);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch8setTempoEd"]
    pub fn soundtouch_SoundTouch_setTempo(this: *mut soundtouch_SoundTouch, newTempo: f64);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch13setRateChangeEd"]
    pub fn soundtouch_SoundTouch_setRateChange(this: *mut soundtouch_SoundTouch, newRate: f64);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch14setTempoChangeEd"]
    pub fn soundtouch_SoundTouch_setTempoChange(this: *mut soundtouch_SoundTouch, newTempo: f64);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch8setPitchEd"]
    pub fn soundtouch_SoundTouch_setPitch(this: *mut soundtouch_SoundTouch, newPitch: f64);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch15setPitchOctavesEd"]
    pub fn soundtouch_SoundTouch_setPitchOctaves(this: *mut soundtouch_SoundTouch, newPitch: f64);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch17setPitchSemiTonesEi"]
    pub fn soundtouch_SoundTouch_setPitchSemiTones(
        this: *mut soundtouch_SoundTouch,
        newPitch: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch17setPitchSemiTonesEd"]
    pub fn soundtouch_SoundTouch_setPitchSemiTones1(
        this: *mut soundtouch_SoundTouch,
        newPitch: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch11setChannelsEj"]
    pub fn soundtouch_SoundTouch_setChannels(this: *mut soundtouch_SoundTouch, numChannels: uint);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch13setSampleRateEj"]
    pub fn soundtouch_SoundTouch_setSampleRate(this: *mut soundtouch_SoundTouch, srate: uint);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch25getInputOutputSampleRatioEv"]
    pub fn soundtouch_SoundTouch_getInputOutputSampleRatio(this: *mut soundtouch_SoundTouch)
        -> f64;
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch5flushEv"]
    pub fn soundtouch_SoundTouch_flush(this: *mut soundtouch_SoundTouch);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch10setSettingEii"]
    pub fn soundtouch_SoundTouch_setSetting(
        this: *mut soundtouch_SoundTouch,
        settingId: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNK10soundtouch10SoundTouch10getSettingEi"]
    pub fn soundtouch_SoundTouch_getSetting(
        this: *const soundtouch_SoundTouch,
        settingId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouchC1Ev"]
    pub fn soundtouch_SoundTouch_SoundTouch(this: *mut soundtouch_SoundTouch);
}
impl soundtouch_SoundTouch {
    #[inline]
    pub unsafe fn getVersionString() -> *const ::std::os::raw::c_char {
        soundtouch_SoundTouch_getVersionString()
    }
    #[inline]
    pub unsafe fn getVersionId() -> uint {
        soundtouch_SoundTouch_getVersionId()
    }
    #[inline]
    pub unsafe fn setRate(&mut self, newRate: f64) {
        soundtouch_SoundTouch_setRate(self, newRate)
    }
    #[inline]
    pub unsafe fn setTempo(&mut self, newTempo: f64) {
        soundtouch_SoundTouch_setTempo(self, newTempo)
    }
    #[inline]
    pub unsafe fn setRateChange(&mut self, newRate: f64) {
        soundtouch_SoundTouch_setRateChange(self, newRate)
    }
    #[inline]
    pub unsafe fn setTempoChange(&mut self, newTempo: f64) {
        soundtouch_SoundTouch_setTempoChange(self, newTempo)
    }
    #[inline]
    pub unsafe fn setPitch(&mut self, newPitch: f64) {
        soundtouch_SoundTouch_setPitch(self, newPitch)
    }
    #[inline]
    pub unsafe fn setPitchOctaves(&mut self, newPitch: f64) {
        soundtouch_SoundTouch_setPitchOctaves(self, newPitch)
    }
    #[inline]
    pub unsafe fn setPitchSemiTones(&mut self, newPitch: ::std::os::raw::c_int) {
        soundtouch_SoundTouch_setPitchSemiTones(self, newPitch)
    }
    #[inline]
    pub unsafe fn setPitchSemiTones1(&mut self, newPitch: f64) {
        soundtouch_SoundTouch_setPitchSemiTones1(self, newPitch)
    }
    #[inline]
    pub unsafe fn setChannels(&mut self, numChannels: uint) {
        soundtouch_SoundTouch_setChannels(self, numChannels)
    }
    #[inline]
    pub unsafe fn setSampleRate(&mut self, srate: uint) {
        soundtouch_SoundTouch_setSampleRate(self, srate)
    }
    #[inline]
    pub unsafe fn getInputOutputSampleRatio(&mut self) -> f64 {
        soundtouch_SoundTouch_getInputOutputSampleRatio(self)
    }
    #[inline]
    pub unsafe fn flush(&mut self) {
        soundtouch_SoundTouch_flush(self)
    }
    #[inline]
    pub unsafe fn setSetting(
        &mut self,
        settingId: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> bool {
        soundtouch_SoundTouch_setSetting(self, settingId, value)
    }
    #[inline]
    pub unsafe fn getSetting(&self, settingId: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        soundtouch_SoundTouch_getSetting(self, settingId)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        soundtouch_SoundTouch_SoundTouch(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouchD1Ev"]
    pub fn soundtouch_SoundTouch_SoundTouch_destructor(this: *mut soundtouch_SoundTouch);
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch10putSamplesEPKfj"]
    pub fn soundtouch_SoundTouch_putSamples(
        this: *mut ::std::os::raw::c_void,
        samples: *const soundtouch_SAMPLETYPE,
        numSamples: uint,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch14receiveSamplesEPfj"]
    pub fn soundtouch_SoundTouch_receiveSamples(
        this: *mut ::std::os::raw::c_void,
        output: *mut soundtouch_SAMPLETYPE,
        maxSamples: uint,
    ) -> uint;
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch14receiveSamplesEj"]
    pub fn soundtouch_SoundTouch_receiveSamples1(
        this: *mut ::std::os::raw::c_void,
        maxSamples: uint,
    ) -> uint;
}
extern "C" {
    #[link_name = "\u{1}__ZN10soundtouch10SoundTouch5clearEv"]
    pub fn soundtouch_SoundTouch_clear(this: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNK10soundtouch10SoundTouch21numUnprocessedSamplesEv"]
    pub fn soundtouch_SoundTouch_numUnprocessedSamples(this: *mut ::std::os::raw::c_void) -> uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RateTransposer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TDStretch {
    pub _address: u8,
}
